<?xml version="1.0" ?>

<!--
  build.xml - generic JPF extension build script
              using Ant (http://jakarta.apache.org/ant)
  public targets:

    compile           compile JPF and its specific (modeled) environment libraries
    test              run all JPF tests
    jar               build JPF jar files
    dist              build binary distribution
    clean             remove the files that have been generated by the build process
-->

<project name="GreenTrie" default="build" basedir=".">

  <!-- ========================== COMMON SECTION ========================== -->

  <!--
    local props have to come first, because Ant properties are immutable
    NOTE: this file is local - it is never in the repository!
  -->
  <property file="jpf.properties"/>
	

  <!-- compiler settings -->
<!--  <property name="src_level"     value="7"/> -->

  <property name="src_level"     value="6"/> 

 <property name="debug"         value="on"/>
  <property name="deprecation"   value="on"/>

  <!-- generic classpath settings -->
  <path id="lib.path">

    <!-- our own classes and libs come first -->
    <pathelement location="build/main"/>
    <!-- we don't have these
    <pathelement location="build/peers"/>
    -->
    <fileset dir=".">
  	    <include name="lib/**/*.jar"/>
    </fileset>
<!---
  	<fileset dir="${jpf-symbc}">
  	   <include name="build/*.jar"/>
  	</fileset>
  	
  	<fileset dir="${jpf-core}">
  	  	   <include name="build/*.jar"/>
  	</fileset> 
  	--> 
 
  </path>

  <!-- init: common initialization -->
  <target name="-init">
    <tstamp/>

    <mkdir dir="build"/>               <!-- the build root -->
  	 <mkdir dir="build/classes"/>     

    <!-- the things that have to be in the classpath of whatever runs Ant -->
    <available property="have_javac" classname="com.sun.tools.javac.Main"/>
    <fail unless="have_javac">no javac found</fail>


    <available file="src/main"        type="dir" property="have_main"/>
    <available file="src/tests"       type="dir" property="have_tests"/>
    <available file="src/examples"    type="dir" property="have_examples"/>

    <condition property="have_jvm_code">
      <or>
        <isset property="have_main"/>
      </or>
    </condition>



    <!-- optionally set the required artifacts here
    <fail unless="have_main">no src/main</fail>
    <fail unless="have_annotations">no src/annotations</fail>
    <fail unless="have_peers">no src/peers</fail>
    <fail unless="have_classes">no src/classes</fail>
    <fail unless="have_tests">no src/tests</fail>
    <fail unless="have_examples">no src/examples</fail>
    -->

  </target>


  <!-- ======================= COMPILE SECTION ============================= -->

  <!-- public compile -->
  <target name="compile" depends="-init,-compile-main,-compile-tests,-compile-examples"
          description="compile all JPF core sources" >
  </target>


  <target name="-compile-main" if="have_main">
    <mkdir dir="build/main"/>
    <javac srcdir="src/main" destdir="build/main"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
           classpathref="lib.path"
		   includeantruntime="false"/>
  </target>


 
  <target name="-compile-tests" depends="-compile-main">
    <mkdir dir="build/tests"/>
    <javac srcdir="src/tests" destdir="build/tests"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
    					classpathref="lib.path"
		   includeantruntime="false">
    </javac>
  </target>

  <target name="-compile-examples" depends="-compile-main">
    <mkdir dir="build/examples" />
    <javac srcdir="src/examples" destdir="build/examples"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
    	classpathref="lib.path"
		   includeantruntime="false">
    </javac>
    </target>


  <!-- ======================= MISC SECTION ================================ -->

  <!-- build jars -->
  <target name="build" depends="compile,-jar-jvm"
        description="generate the ${ant.project.name} jar files" >
  </target>

  <target name="-jar-jvm" if="have_jvm_code">
    <jar jarfile="build/${ant.project.name}.jar">
      <fileset dir="build/main"/>
    </jar>
  </target>



  <target name="dist" description="build binary distribution">
    <delete file="build/${ant.project.name}.zip"/>
    <!-- 2do this seems stupid - there needs to be a better way to re-base (zip basedir fails miserably) -->
    <zip destfile="build/${ant.project.name}.zip" update="false" excludes="*">
      <zipfileset file="jpf.properties"  prefix="${ant.project.name}"/>
      <!-- don't have one
      <zipfileset dir="lib"  prefix="${ant.project.name}/lib"/>
      -->
      <zipfileset dir="bin"  prefix="${ant.project.name}/bin"/>
      <zipfileset dir="build" includes="*.jar" prefix="${ant.project.name}/build"/>
      <zipfileset dir="tools" includes="Run*.jar" prefix="${ant.project.name}/tools"/>
    </zip>
  </target>

  <!-- public clean: cleanup from previous tasks/builds -->
  <target name="clean">
    <delete dir="build" />
    <delete>
      <fileset dir="." includes="**/*~" defaultexcludes="no" />
      <fileset dir="." includes="**/*.bak" defaultexcludes="no" />
      <fileset dir="." includes="**/error.xml" />
    </delete>
  </target>



  <!-- ======================= TEST SECTION ================================ -->


</project>
