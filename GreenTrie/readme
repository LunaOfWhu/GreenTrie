
########################
1. Introduction
########################

This artifact is the source code of constraint solution reuse framework GreenTrie, which is described in the paper "Enhancing Reuse of Constraint Solutions to Improve Symbolic Execution".
GreenTrie is an extension to the Green framework, and it supports constraint reuse based on the logical implication relations among constraints. GreenTrie stores constraints and solutions into tries, indexed by an implication partial order graph of constraints. It is able to carry out logical reduction and logical subset and superset querying for given constraints,to check for reuse of previously solved constraints. 
This artifact can reproduce all the experiment results in the paper.

If you have problems in use of this artifact, please contact these emails:
  jiaxiangyang@163.com  or  jxy@whu.edu.cn

########################
2. Setup
########################

This artifact includes an Eclipse project, which can be imported into Eclipse to build and run it.
 (1) Unzip the artifact, and import the folder "GreenTrie" into Eclipse as an project.
 (2) Right click the build.xml, and use menu item "run as/Ant build" to build the framework.
 (3) Setup the Z3 and CVC3: if you OS is linux, copy library files(libcvc3.so.5.0.0,libcvc3.so.5.0,libcvc3.so.5,libz3java.so,libz3.so) of Z3 and CVC3 into the directory /lib of your computer.

  
 ################################
3. Reproduce the experiment results
################################
 
 The folder src/examples contains 6 subject programs of our experiments. The Junit test classes in this folder can be used to produce the  experiment results. 
 For example, BinTreeTest.java is a Junit test case for program BinTree. It contains 8 test methods:
	(1)testRedis:  "reuse in single run" evaluation  with Classical Green framework(Table 1 in paper).
	(2)testTries: "reuse in single run" evaluation with GreenTrie framework(Table 1 in paper).	
 (3)testAddRedisStore: "reuse across runs" evaluation for ADDITION changes with Classical Green framework(Table 2 in paper).
	(4)testAddTrieStore: "reuse across runs" evaluation for ADDITION changes with GreenTrie framework(Table 2 in paper).
	(5)testDeleteRedisStore: "reuse across runs" evaluation for DELETION changes with Classical Green framework(Table 2 in paper).
	(6)testDeleteTrieStore: "reuse across runs" evaluation for DELETION changes with GreenTrie framework(Table 2 in paper).
	(7)testMofifyRedisStore: "reuse across runs" evaluation for MODIFICATION changes with Classical Green framework(Table 2 in paper).
	(8)testMofifyTrieStore: "reuse across runs" evaluation for MODIFICATION changes with GreenTrie framework(Table 2 in paper).
	
	The "Reuse across Programs" evaluation(Table 3 in paper) for Classical Green framework is done as following:     
  (1) run the "testRedis" method of the first program's test class, to cache its constraint solutions.
  (2) delete the line "TestUtil.clearRedis();" of method "testRedis" of the second program's test class, and run it, to reuse the solutions of first program for constraints solving.
      
	The "Reuse across Programs" evaluation(Table 3 in paper) for GreenTrie framework is done as following:     
  (1) run the "testTrie" method of the first program's test class, to cache its constraint solutions.
  (2) delete the line "TestUtil.clearTrie(conf);" of method "testTrie" of the second program's test class, and run it, to reuse the solutions of first program for constraints solving.
      
	The experiment result is shown in the console after the running of test method. 
	(1)"elapsed time": the running time of symbolic execution.
	(2)"invocationCount": the number of constraint solving request received by Green/GreenTrie
  (3)"cacheHitCount": the number of reusable constraints found in store.
  (4)"cacheMissCount": the number of constraint that cannot found reusable solutions in store, and this is also the number of constraint solved by solver in this run.
  (5)"timeConsumption": the total time spent on constraint solving by SAT/SMT solver. 
  
  Notice: GreenTrie framework has been updated after the paper is submitted, therefore some experiment results may be a little different from that in the paper. In most cases,the result is better than that in the paper.
    
	  
 ##########################################
4.  Use GreenTrie in Symbolic Pathfinder
##########################################

In order to use GreenTrie in Symbolic Pathfinder, we need some configuration items for program's jpf file. 
As shown in the folder, the program Bintree has a configuration file BinTree.jpf, which contains some properties for Green/GreenTrie frameworks.

		symbolic.green = true
		green.taskmanager = za.ac.sun.cs.green.taskmanager.ParallelTaskManager
		#green.store = za.ac.sun.cs.green.store.redis.RedisStore
		green.store =gov.nasa.jpf.symbc.green.trie.TrieStore
		green.services = sat
		green.service.sat = (slice (canonize z3))
		green.service.sat.slice = za.ac.sun.cs.green.service.slicer.SATSlicerService
		#green.service.sat.canonize = za.ac.sun.cs.green.service.canonizer.SATCanonizerService
		green.service.sat.canonize = gov.nasa.jpf.symbc.green.trie.SATCanonizerService
		green.service.sat.z3 = za.ac.sun.cs.green.service.z3.SATZ3JavaService
 
 As shown in this file, GreenTrie has two different properties from Green.
 (1)"green.store" should be set as "gov.nasa.jpf.symbc.green.trie.TrieStore". 
 (2)"green.service.sat.canonize" should be set as "za.ac.sun.cs.green.service.canonizer.SATCanonizerService". 
 
If we start a symbolic execution with this jpf file, GreenTrie Framework is used for caching and reusing the constraint solutions.



